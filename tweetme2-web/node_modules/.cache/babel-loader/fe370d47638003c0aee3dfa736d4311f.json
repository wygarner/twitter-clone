{"ast":null,"code":"import _slicedToArray from \"/Users/wyattgarner/Dev/tweetme2/tweetme2-web/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/wyattgarner/Dev/tweetme2/tweetme2-web/src/tweets/feed.js\";\nimport React, { useEffect, useState } from 'react';\nimport { apiTweetFeed } from './lookup';\nimport { Tweet } from './detail';\nexport function FeedList(props) {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        tweetsInit = _useState2[0],\n        setTweetsInit = _useState2[1];\n\n  const _useState3 = useState([]),\n        _useState4 = _slicedToArray(_useState3, 2),\n        tweets = _useState4[0],\n        setTweets = _useState4[1];\n\n  const _useState5 = useState(null),\n        _useState6 = _slicedToArray(_useState5, 2),\n        nextUrl = _useState6[0],\n        setNextUrl = _useState6[1];\n\n  const _useState7 = useState(false),\n        _useState8 = _slicedToArray(_useState7, 2),\n        tweetsDidSet = _useState8[0],\n        setTweetsDidSet = _useState8[1];\n\n  useEffect(() => {\n    const final = [...props.newTweets].concat(tweetsInit);\n\n    if (final.length !== tweets.length) {\n      setTweets(final);\n    }\n  }, [props.newTweets, tweets, tweetsInit]);\n  useEffect(() => {\n    if (tweetsDidSet === false) {\n      const handleTweetListLookup = (response, status) => {\n        if (status === 200) {\n          setNextUrl(response.next);\n          setTweetsInit(response.results);\n          setTweetsDidSet(true);\n        }\n      };\n\n      apiTweetFeed(handleTweetListLookup);\n    }\n  }, [tweetsInit, tweetsDidSet, setTweetsDidSet, props.username]);\n\n  const handleDidRetweet = newTweet => {\n    const updateTweetsInit = [...tweetsInit];\n    updateTweetsInit.unshift(newTweet);\n    setTweetsInit(updateTweetsInit);\n    const updateFinalTweets = [...tweets];\n    updateFinalTweets.unshift(tweets);\n    setTweets(updateFinalTweets);\n  };\n\n  const handleLoadNext = event => {\n    event.preventDefault();\n\n    if (nextUrl !== null) {\n      const handleLoadNextResponse = (response, status) => {\n        if (status === 200) {\n          setNextUrl(response.next);\n          const newTweets = [...tweets].concat(response.results);\n          setTweetsInit(newTweets);\n          setTweets(newTweets);\n        }\n      };\n\n      apiTweetFeed(handleLoadNextResponse, nextUrl);\n    }\n  };\n\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, tweets.map((item, index) => {\n    return React.createElement(Tweet, {\n      tweet: item,\n      didRetweet: handleDidRetweet,\n      className: \"my-5 py-5 border bg-white text-dark\",\n      key: `${index}-{item.id}`,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    });\n  }), nextUrl !== null && React.createElement(\"button\", {\n    onClick: handleLoadNext,\n    className: \"btn btn-outline-primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, \"Load next\"));\n}","map":{"version":3,"sources":["/Users/wyattgarner/Dev/tweetme2/tweetme2-web/src/tweets/feed.js"],"names":["React","useEffect","useState","apiTweetFeed","Tweet","FeedList","props","tweetsInit","setTweetsInit","tweets","setTweets","nextUrl","setNextUrl","tweetsDidSet","setTweetsDidSet","final","newTweets","concat","length","handleTweetListLookup","response","status","next","results","username","handleDidRetweet","newTweet","updateTweetsInit","unshift","updateFinalTweets","handleLoadNext","event","preventDefault","handleLoadNextResponse","map","item","index"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAA0C,OAA1C;AAEA,SAAQC,YAAR,QAA2B,UAA3B;AAEA,SAAQC,KAAR,QAAoB,UAApB;AAEA,OAAO,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AAAA,oBACQJ,QAAQ,CAAC,EAAD,CADhB;AAAA;AAAA,QACrBK,UADqB;AAAA,QACTC,aADS;;AAAA,qBAEAN,QAAQ,CAAC,EAAD,CAFR;AAAA;AAAA,QAErBO,MAFqB;AAAA,QAEbC,SAFa;;AAAA,qBAGER,QAAQ,CAAC,IAAD,CAHV;AAAA;AAAA,QAGrBS,OAHqB;AAAA,QAGZC,UAHY;;AAAA,qBAIYV,QAAQ,CAAC,KAAD,CAJpB;AAAA;AAAA,QAIrBW,YAJqB;AAAA,QAIPC,eAJO;;AAK5Bb,EAAAA,SAAS,CAAC,MAAI;AACZ,UAAMc,KAAK,GAAG,CAAC,GAAGT,KAAK,CAACU,SAAV,EAAqBC,MAArB,CAA4BV,UAA5B,CAAd;;AACA,QAAIQ,KAAK,CAACG,MAAN,KAAiBT,MAAM,CAACS,MAA5B,EAAoC;AAClCR,MAAAA,SAAS,CAACK,KAAD,CAAT;AACD;AACF,GALQ,EAKN,CAACT,KAAK,CAACU,SAAP,EAAkBP,MAAlB,EAA0BF,UAA1B,CALM,CAAT;AAOAN,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIY,YAAY,KAAK,KAArB,EAA2B;AACzB,YAAMM,qBAAqB,GAAG,CAACC,QAAD,EAAWC,MAAX,KAAsB;AAClD,YAAIA,MAAM,KAAK,GAAf,EAAmB;AACjBT,UAAAA,UAAU,CAACQ,QAAQ,CAACE,IAAV,CAAV;AACAd,UAAAA,aAAa,CAACY,QAAQ,CAACG,OAAV,CAAb;AACAT,UAAAA,eAAe,CAAC,IAAD,CAAf;AACD;AACF,OAND;;AAOAX,MAAAA,YAAY,CAACgB,qBAAD,CAAZ;AACD;AACF,GAXQ,EAWN,CAACZ,UAAD,EAAaM,YAAb,EAA2BC,eAA3B,EAA4CR,KAAK,CAACkB,QAAlD,CAXM,CAAT;;AAcA,QAAMC,gBAAgB,GAAIC,QAAD,IAAc;AACrC,UAAMC,gBAAgB,GAAG,CAAC,GAAGpB,UAAJ,CAAzB;AACAoB,IAAAA,gBAAgB,CAACC,OAAjB,CAAyBF,QAAzB;AACAlB,IAAAA,aAAa,CAACmB,gBAAD,CAAb;AACA,UAAME,iBAAiB,GAAG,CAAC,GAAGpB,MAAJ,CAA1B;AACAoB,IAAAA,iBAAiB,CAACD,OAAlB,CAA0BnB,MAA1B;AACAC,IAAAA,SAAS,CAACmB,iBAAD,CAAT;AACD,GAPD;;AAQA,QAAMC,cAAc,GAAIC,KAAD,IAAW;AAChCA,IAAAA,KAAK,CAACC,cAAN;;AACA,QAAIrB,OAAO,KAAK,IAAhB,EAAsB;AACpB,YAAMsB,sBAAsB,GAAG,CAACb,QAAD,EAAWC,MAAX,KAAqB;AAClD,YAAIA,MAAM,KAAK,GAAf,EAAmB;AACjBT,UAAAA,UAAU,CAACQ,QAAQ,CAACE,IAAV,CAAV;AACA,gBAAMN,SAAS,GAAG,CAAC,GAAGP,MAAJ,EAAYQ,MAAZ,CAAmBG,QAAQ,CAACG,OAA5B,CAAlB;AACAf,UAAAA,aAAa,CAACQ,SAAD,CAAb;AACAN,UAAAA,SAAS,CAACM,SAAD,CAAT;AACD;AACF,OAPD;;AAQAb,MAAAA,YAAY,CAAC8B,sBAAD,EAAyBtB,OAAzB,CAAZ;AACD;AACF,GAbD;;AAeA,SAAO,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAiBF,MAAM,CAACyB,GAAP,CAAW,CAACC,IAAD,EAAOC,KAAP,KAAe;AAChD,WAAO,oBAAC,KAAD;AACL,MAAA,KAAK,EAAED,IADF;AAEL,MAAA,UAAU,EAAEV,gBAFP;AAGL,MAAA,SAAS,EAAC,qCAHL;AAIL,MAAA,GAAG,EAAG,GAAEW,KAAM,YAJT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AAKD,GANuB,CAAjB,EAONzB,OAAO,KAAK,IAAZ,IAAoB;AAAQ,IAAA,OAAO,EAAEmB,cAAjB;AAAiC,IAAA,SAAS,EAAC,yBAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAPd,CAAP;AASD","sourcesContent":["import React, {useEffect, useState}  from 'react'\n\nimport {apiTweetFeed} from './lookup'\n\nimport {Tweet} from './detail'\n\nexport function FeedList(props) {\n    const [tweetsInit, setTweetsInit] = useState([])\n    const [tweets, setTweets] = useState([])\n    const [nextUrl, setNextUrl] = useState(null)\n    const [tweetsDidSet, setTweetsDidSet] = useState(false)\n    useEffect(()=>{\n      const final = [...props.newTweets].concat(tweetsInit)\n      if (final.length !== tweets.length) {\n        setTweets(final)\n      }\n    }, [props.newTweets, tweets, tweetsInit])\n\n    useEffect(() => {\n      if (tweetsDidSet === false){\n        const handleTweetListLookup = (response, status) => {\n          if (status === 200){\n            setNextUrl(response.next)\n            setTweetsInit(response.results)\n            setTweetsDidSet(true)\n          }\n        }\n        apiTweetFeed(handleTweetListLookup)\n      }\n    }, [tweetsInit, tweetsDidSet, setTweetsDidSet, props.username])\n\n\n    const handleDidRetweet = (newTweet) => {\n      const updateTweetsInit = [...tweetsInit]\n      updateTweetsInit.unshift(newTweet)\n      setTweetsInit(updateTweetsInit)\n      const updateFinalTweets = [...tweets]\n      updateFinalTweets.unshift(tweets)\n      setTweets(updateFinalTweets)\n    }\n    const handleLoadNext = (event) => {\n      event.preventDefault()\n      if (nextUrl !== null) {\n        const handleLoadNextResponse = (response, status) =>{\n          if (status === 200){\n            setNextUrl(response.next)\n            const newTweets = [...tweets].concat(response.results)\n            setTweetsInit(newTweets)\n            setTweets(newTweets)\n          }\n        }\n        apiTweetFeed(handleLoadNextResponse, nextUrl)\n      }\n    }\n\n    return <React.Fragment>{tweets.map((item, index)=>{\n      return <Tweet  \n        tweet={item} \n        didRetweet={handleDidRetweet}\n        className='my-5 py-5 border bg-white text-dark' \n        key={`${index}-{item.id}`} />\n    })}\n    {nextUrl !== null && <button onClick={handleLoadNext} className='btn btn-outline-primary'>Load next</button>}\n    </React.Fragment>\n  }\n\n\n"]},"metadata":{},"sourceType":"module"}